# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2 as grpc__pb2


class ModelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ModelList = channel.unary_unary(
                '/Model/ModelList',
                request_serializer=grpc__pb2.Empty.SerializeToString,
                response_deserializer=grpc__pb2.ModelListResponse.FromString,
                )
        self.ModelAdd = channel.unary_unary(
                '/Model/ModelAdd',
                request_serializer=grpc__pb2.ModelAddRequest.SerializeToString,
                response_deserializer=grpc__pb2.ModelSimpleRequest.FromString,
                )
        self.ModelRemove = channel.unary_unary(
                '/Model/ModelRemove',
                request_serializer=grpc__pb2.ModelSimpleRequest.SerializeToString,
                response_deserializer=grpc__pb2.ModelSimpleResponse.FromString,
                )
        self.ModelTrain = channel.unary_unary(
                '/Model/ModelTrain',
                request_serializer=grpc__pb2.ModelSimpleRequest.SerializeToString,
                response_deserializer=grpc__pb2.ModelSimpleResponse.FromString,
                )
        self.ModelPredict = channel.unary_unary(
                '/Model/ModelPredict',
                request_serializer=grpc__pb2.ModelPredictRequest.SerializeToString,
                response_deserializer=grpc__pb2.ModelPredictResponse.FromString,
                )


class ModelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ModelList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelRemove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelTrain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelPredict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ModelList': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelList,
                    request_deserializer=grpc__pb2.Empty.FromString,
                    response_serializer=grpc__pb2.ModelListResponse.SerializeToString,
            ),
            'ModelAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelAdd,
                    request_deserializer=grpc__pb2.ModelAddRequest.FromString,
                    response_serializer=grpc__pb2.ModelSimpleRequest.SerializeToString,
            ),
            'ModelRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelRemove,
                    request_deserializer=grpc__pb2.ModelSimpleRequest.FromString,
                    response_serializer=grpc__pb2.ModelSimpleResponse.SerializeToString,
            ),
            'ModelTrain': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelTrain,
                    request_deserializer=grpc__pb2.ModelSimpleRequest.FromString,
                    response_serializer=grpc__pb2.ModelSimpleResponse.SerializeToString,
            ),
            'ModelPredict': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelPredict,
                    request_deserializer=grpc__pb2.ModelPredictRequest.FromString,
                    response_serializer=grpc__pb2.ModelPredictResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Model', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Model(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ModelList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/ModelList',
            grpc__pb2.Empty.SerializeToString,
            grpc__pb2.ModelListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/ModelAdd',
            grpc__pb2.ModelAddRequest.SerializeToString,
            grpc__pb2.ModelSimpleRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/ModelRemove',
            grpc__pb2.ModelSimpleRequest.SerializeToString,
            grpc__pb2.ModelSimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelTrain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/ModelTrain',
            grpc__pb2.ModelSimpleRequest.SerializeToString,
            grpc__pb2.ModelSimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelPredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/ModelPredict',
            grpc__pb2.ModelPredictRequest.SerializeToString,
            grpc__pb2.ModelPredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
